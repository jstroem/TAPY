{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 the semantics for "for-loops" in python is defined as:\
	"for" target_list "in" expression_list ":" suite\
	["else" ":" suite] \
\
an example could be:\
for x in [1,2,3]:\
	print x\
else:\
	print "not a break'ed exit"\
\
First the expression_list is evaluated and this should yield a iterable object, an iterator object is then created and for each element in the iterator the body of the for-loop is evaluated once.\
Furthermore an optional else-case can be appended to the for-loop, this else-case is evaluated when all iterations is done, and the else-case is not evaluated if the iteration stops because of a break-node.\
To emulate this evaluation sequence in our CFG we need to understand the iterator object. To get the next element from a python iterator object the next method is used, this method gives you the next element until the iteration is done and it then throws a StopIteration exception.}